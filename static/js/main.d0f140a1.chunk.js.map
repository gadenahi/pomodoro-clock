{"version":3,"sources":["BeepSound.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pomodoro","props","state","break","session","status","displayname","display","timerclass","handleBreaks","bind","handleSessions","handleStartStop","handleReset","handleCountDown","e","this","target","value","setState","interval_id","setInterval","secondsRemaining","Number","slice","clearInterval","min","Math","floor","sec","beep","play","pause","currentTime","id","breaks","currentBreak","sessions","currentSession","startStop","reset","currentDisplay","displayName","timerClass","ref","preload","crossOrigin","src","beepSound","React","Component","Length","className","onClick","Timer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0f140a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","import React from 'react';\nimport beepSound from './BeepSound.wav'\nimport './App.css';\n\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      break: 5,\n      session: 25,\n      status: false,\n      displayname: \"Session\",\n      display: \"25:00\",\n      timerclass: \"timerstandard\"\n    }\n    this.handleBreaks = this.handleBreaks.bind(this)\n    this.handleSessions = this.handleSessions.bind(this)\n    this.handleStartStop = this.handleStartStop.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n    this.handleCountDown = this.handleCountDown.bind(this)\n  }\n  handleBreaks(e) {\n    if (!this.state.status) {\n      if (e.target.value === \"decrement\" && this.state.break >= 2) {      \n        this.setState({\n          break: this.state.break - 1\n        })\n      }\n      else if (e.target.value === \"increment\" && this.state.break <=59) {\n        this.setState({\n          break: this.state.break + 1\n        })\n      }\n    }  \n  }\n  \n  handleSessions(e) {\n    if (!this.state.status) {\n      if (e.target.value === \"decrement\" && this.state.session >=2) {\n        if (this.state.session <= 10) {\n          this.setState({\n            session: this.state.session - 1,\n            display: \"0\" + (this.state.session - 1) + \":00\" \n          })\n        } else {\n          this.setState({\n            session: this.state.session - 1,\n            display: (this.state.session - 1) + \":00\"           \n          })\n        }\n      }                      \n      else if (e.target.value === \"increment\" && this.state.session <=59) {\n        if (this.state.session <= 8) {\n          this.setState({\n            session: this.state.session + 1,\n            display: \"0\" + (this.state.session + 1) + \":00\" \n          })      \n        } else {\n          this.setState({\n            session: this.state.session + 1,\n            display: (this.state.session + 1) + \":00\" \n          })           \n        }\n      }\n    }\n  }\n  \n  handleStartStop() {\n    if (this.state.status === false) {\n      this.interval_id = setInterval(this.handleCountDown, 1000)\n      this.secondsRemaining = Number((this.state.display.slice(0,2) * 60)) + Number(this.state.display.slice(3,5)) - 1\n      this.setState({\n        status: true\n    })\n    }\n    else if (this.state.status === true) {\n      clearInterval(this.interval_id)\n      this.setState({\n        status: false\n      })\n    }\n  }\n\n  handleCountDown() {    \n    var min = Math.floor(this.secondsRemaining / 60) \n    var sec = Math.floor(this.secondsRemaining % 60)\n    \n    if (min === 0 && sec === 0) {\n      this.secondsRemaining = this.state.break * 60 + 1\n      this.beep.play()\n      this.setState({\n        display: \"0\" + min + \":\" + \"0\" + sec,\n      })   \n    } else {\n      this.setState({\n        display: min + \":\" + sec\n      })\n      if (min >=1 && sec >=0 && this.state.timerclass === \"timerred\" && this.state.displayname ===\"Session\") {\n        this.setState ({\n          timerclass: \"timerstandard\",\n          displayname: \"Break\"\n        })\n      }\n      if (min >=1 && sec >=0 && this.state.timerclass === \"timerred\" && this.state.displayname ===\"Break\") {\n        this.setState ({\n          timerclass: \"timerstandard\",\n          displayname: \"Session\"\n        })\n      }      \n      if (min < 10) {\n        this.setState({\n          display: \"0\"+ min + \":\" + sec \n        })      \n      }\n      if (sec < 10) {\n        this.setState({\n          display: min + \":\" + \"0\" + sec \n        })\n      }   \n      if (min < 10 && sec < 10) {\n        this.setState({\n          display: \"0\" + min + \":\" + \"0\" + sec \n        })\n      }      \n      if (min === 0 && sec === 59) {\n        this.setState({\n          timerclass: \"timerred\"\n        })\n      }\n    }\n     this.secondsRemaining = this.secondsRemaining - 1   \n  }  \n  \n  handleReset() {\n    clearInterval(this.interval_id)\n    this.beep.pause()\n    this.beep.currentTime=0;\n    this.setState({\n      break: 5,\n      session: 25,\n      status: false,\n      displayname: \"Session\",\n      display: \"25:00\",\n      timerclass: \"timerstandard\"\n    })\n  }\n  \n  render() {\n    return(\n      <div id=\"main\">\n        <h1>Pomodoro Clock</h1>\n        <Length \n          breaks={this.handleBreaks}\n          currentBreak={this.state.break}\n          sessions={this.handleSessions}\n          currentSession={this.state.session} />\n        <Timer \n          startStop={this.handleStartStop}\n          reset={this.handleReset}\n          currentDisplay={this.state.display} \n          displayName={this.state.displayname}\n          timerClass={this.state.timerclass}\n          />\n        <audio \n          ref={ref => this.beep = ref}\n          id=\"beep\"\n          preload=\"auto\"\n          crossOrigin=\"*\"\n          // src=\"https://goo.gl/65cBl1\"\n          src={beepSound}\n          />\n      </div>\n      )\n    }\n}\n\nclass Length extends React.Component {\n  render() {\n    return (\n      <div id=\"length-wrapper\">\n      <div className=\"length\">\n        <div id=\"break-label\" className=\"label\">Break Length</div>  \n          <button id=\"break-decrement\" onClick={this.props.breaks} value=\"decrement\" className=\"btn\">↓</button>\n          <div id=\"break-length\" className=\"lengthdisplay\">{this.props.currentBreak}</div>\n          <button id=\"break-increment\" onClick={this.props.breaks} value=\"increment\" className=\"btn\">↑</button>\n      </div>\n      <div className=\"length\">      \n        <div id=\"session-label\" className=\"label\">Session Length</div>\n          <button id=\"session-decrement\" onClick={this.props.sessions} value=\"decrement\" className=\"btn\">↓</button>\n          <div id=\"session-length\" className=\"lengthdisplay\">{this.props.currentSession}</div>     \n          <button id=\"session-increment\" onClick={this.props.sessions} value=\"increment\" className=\"btn\">↑</button>\n      </div>\n      </div>  \n    )\n  }\n}\n\nclass Timer extends React.Component {\n  render() {\n    return(\n    <div id=\"timer-wrapper\" className={this.props.timerClass}>\n        <div id=\"timer-label\">{this.props.displayName}</div>\n        <div id=\"time-left\">{this.props.currentDisplay}</div>\n        <button id=\"start_stop\" onClick={this.props.startStop}>\n          <i className=\"fa fa-play fa-2x\"></i>\n          <i className=\"fa fa-pause fa-2x\"></i>\n        </button>\n        <button id=\"reset\" onClick={this.props.reset}>\n          <i className=\"fa fa-refresh fa-2x\"></i>\n        </button>\n      </div>    \n    )\n  }\n}\n\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('pomodoro'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}